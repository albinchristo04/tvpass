name: Update IPTV Streams

on:
  schedule:
    # Run every 15 minutes
    - cron: '0 */8 * * *'
  workflow_dispatch: # Allow manual trigger
  push:
    branches: [ main ]
    paths: [ 'scrape_streams.py' ]

permissions:
  contents: write   # âœ… allow pushing commits

jobs:
  update-streams:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        persist-credentials: true   # âœ… ensure pushes back to repo
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests
    
    - name: Run stream scraper
      env:
        OUTPUT_FILE: streams.json
        MAX_WORKERS: 3
      run: |
        python scrape_streams.py
        
    - name: Check if streams.json was created
      run: |
        if [ ! -f streams.json ]; then
          echo "Error: streams.json was not created"
          exit 1
        fi
        echo "File size: $(wc -c < streams.json) bytes"
        echo "Total channels: $(jq '.total_channels' streams.json)"
        echo "Working channels: $(jq '.working_channels' streams.json)"
    
    - name: Commit and push changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        git add streams.json
        
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          TOTAL=$(jq -r '.total_channels' streams.json)
          WORKING=$(jq -r '.working_channels' streams.json)
          TIMESTAMP=$(jq -r '.last_updated' streams.json)
          
          git commit -m "ðŸ”„ Update streams: ${WORKING}/${TOTAL} working (${TIMESTAMP})"
          git push
          echo "Changes pushed successfully"
        fi
    
    - name: Create release asset (optional)
      if: github.event_name == 'workflow_dispatch'
      run: |
        TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
        cp streams.json "streams_${TIMESTAMP}.json"
        echo "Created timestamped backup: streams_${TIMESTAMP}.json"
    
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: streams-data
        path: |
          streams.json
          streams_*.json
        retention-days: 7
